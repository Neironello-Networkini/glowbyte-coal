import streamlit as st
import pandas as pd
import os
import datetime
import requests

API_URL = "http://localhost:8000/stack"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="FireWatch", page_icon="üî•", layout="wide")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª–∏
style_path = os.path.join(os.path.dirname(__file__), "..", "styles.css")
with open(style_path, encoding="utf-8") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# –®–∞–ø–∫–∞ —Å–∞–π—Ç–∞
def header():
    st.markdown("""
    <div class="site-header">
        <div class="logo">üî• FireWatch</div>
        <div class="nav">
            <a class="nav-item" href="/">–ì–ª–∞–≤–Ω–∞—è</a>
            <a class="nav-item active" href="/stack">–®—Ç–∞–±–µ–ª–∏</a>
            <a class="nav-item" href="/warehouse">–°–∫–ª–∞–¥—ã</a>
            <a class="nav-item" href="/shipments">–í—ã–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–≥—Ä—É–∑–∫–∏</a>
            <a class="nav-item" href="/location">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</a>
            <a class="nav-item" href="/help">–°–ø—Ä–∞–≤–∫–∞</a>
        </div>
    </div>
    """, unsafe_allow_html=True)

header()

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —à—Ç–∞–±–µ–ª–µ–π
# def get_shabels_data():
#     # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     shabel_data = [
#         {"ID": 1, "–ù–∞–∑–≤–∞–Ω–∏–µ": "–®—Ç–∞–±–µ–ª—å 1", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω": "2023-04-01", "–ë–ª–∏–∂–∞–π—à–µ–µ –≤–æ–∑–≥–æ—Ä–∞–Ω–∏–µ": "2023-05-10",
#          "–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "450¬∞C", "–°–∫–ª–∞–¥": 5},
#         {"ID": 2, "–ù–∞–∑–≤–∞–Ω–∏–µ": "–®—Ç–∞–±–µ–ª—å 5774", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω": "2023-04-15", "–ë–ª–∏–∂–∞–π—à–µ–µ –≤–æ–∑–≥–æ—Ä–∞–Ω–∏–µ": "2023-06-20",
#          "–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "500¬∞C", "–°–∫–ª–∞–¥": 4},
#         {"ID": 3, "–ù–∞–∑–≤–∞–Ω–∏–µ": "–®—Ç–∞–±–µ–ª—å 3", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω": "2023-05-01", "–ë–ª–∏–∂–∞–π—à–µ–µ –≤–æ–∑–≥–æ—Ä–∞–Ω–∏–µ": "2023-07-30",
#          "–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "480¬∞C", "–°–∫–ª–∞–¥": 2},
#         {"ID": 4, "–ù–∞–∑–≤–∞–Ω–∏–µ": "–®—Ç–∞–±–µ–ª—å 4", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω": "2023-06-05", "–ë–ª–∏–∂–∞–π—à–µ–µ –≤–æ–∑–≥–æ—Ä–∞–Ω–∏–µ": "2023-08-25",
#          "–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "470¬∞C", "–°–∫–ª–∞–¥": 3},
#         {"ID": 5, "–ù–∞–∑–≤–∞–Ω–∏–µ": "–®—Ç–∞–±–µ–ª—å 5", "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω": "2023-06-10", "–ë–ª–∏–∂–∞–π—à–µ–µ –≤–æ–∑–≥–æ—Ä–∞–Ω–∏–µ": "2023-09-12",
#          "–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "460¬∞C", "–°–∫–ª–∞–¥": 1}
#     ]

#     # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ DataFrame
#     return pd.DataFrame(shabel_data)


def fetch_stacks():
    try:
        resp = requests.get(f"{API_URL}/")
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return []

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ + —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
st.markdown("""
<div style="display: flex; justify-content: space-between; align-items: center; margin-top: 20px;">
    <h1>–°–ø–∏—Å–æ–∫ —à—Ç–∞–±–µ–ª–µ–π</h1>
</div>
""", unsafe_allow_html=True)

# –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —à—Ç–∞–±–µ–ª—è
st.markdown("""
<div style="margin: 20px 0; padding: 15px; background-color: #f8f9fa; border-radius: 8px;">
    <h3>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —à—Ç–∞–±–µ–ª—å</h3>
</div>
""", unsafe_allow_html=True)

with st.form("new_stack_form"):
    col1, col2 = st.columns(2)
    
    with col1:
        stack_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —à—Ç–∞–±–µ–ª—è", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –®—Ç–∞–±–µ–ª—å 1")
    with col2:
        warehouse = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∫–ª–∞–¥ 1")
        
    
    submit_button = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —à—Ç–∞–±–µ–ª—å")
    
    if submit_button:
        if stack_name and warehouse:
            payload = {
                "name": stack_name,
                "warehouse": warehouse
            }
            try:
                resp = requests.post(f"{API_URL}/", json=payload)
                if resp.status_code == 200:
                    st.success("–®—Ç–∞–±–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    st.rerun()
                else:
                    st.error(f"–û—à–∏–±–∫–∞: {resp.text}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        else:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

# –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫
st.markdown("""
<div style="margin: 20px 0; padding: 15px; background-color: #f8f9fa; border-radius: 8px;">
    <h3>–§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫</h3>
</div>
""", unsafe_allow_html=True)

# –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
col1, col2, col3 = st.columns(3)

with col2:
    search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ç–∞–±–µ–ª—è")

with col1:
    id_filter = st.text_input("–§–∏–ª—å—Ç—Ä –ø–æ ID", placeholder="–í–≤–µ–¥–∏—Ç–µ ID")

with col3:
    warehouse_filter = st.text_input("–§–∏–ª—å—Ç—Ä –ø–æ —Å–∫–ª–∞–¥—É", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞")

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
stacks_data = fetch_stacks()
if not stacks_data:
    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —à—Ç–∞–±–µ–ª—è—Ö")
    st.stop()
df_stacks = pd.DataFrame(stacks_data)

filtered_df = df_stacks.copy()

if search_query:
    filtered_df = filtered_df[filtered_df['name'].str.contains(search_query, case=False, na=False)]

if id_filter:
    filtered_df = filtered_df[filtered_df['id'].astype(str).str.contains(id_filter)]

if warehouse_filter:
    filtered_df = filtered_df[filtered_df['warehouse_id'].astype(str).str.contains(warehouse_filter)]

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —à—Ç–∞–±–µ–ª–µ–π
st.markdown("""
<div style="margin: 20px 0; padding: 15px; background-color: #f8f9fa; border-radius: 8px;">
    <h3>–°–ø–∏—Å–æ–∫ —à—Ç–∞–±–µ–ª–µ–π</h3>
</div>
""", unsafe_allow_html=True)

st.dataframe(filtered_df)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
csv = filtered_df.to_csv(index=False)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ CSV
st.download_button(
    label="–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —à—Ç–∞–±–µ–ª–µ–π",
    data=csv,
    file_name="stack.csv",
    mime="text/csv"
)

st.header("–ó–∞–≥—Ä—É–∑–∏—Ç—å —à—Ç–∞–±–µ–ª–∏ –∏–∑ CSV")
with st.form("upload_stack_csv"):
    csv_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å–æ —à—Ç–∞–±–µ–ª—è–º–∏", type=["csv"])
    upload_submitted = st.form_submit_button("–ó–∞–≥—Ä—É–∑–∏—Ç—å")
    if upload_submitted and csv_file is not None:
        try:
            files = {"file": (csv_file.name, csv_file.getvalue(), "text/csv")}
            resp = requests.post(f"{API_URL}/upload", files=files)
            if resp.status_code == 201:
                st.success("–®—Ç–∞–±–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                st.rerun()
            else:
                st.error(f"–û—à–∏–±–∫–∞: {resp.text}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {e}")

st.header("–ü–æ–∏—Å–∫ —à—Ç–∞–±–µ–ª—è –ø–æ ID")
search_id = st.number_input("–í–≤–µ–¥–∏—Ç–µ ID —à—Ç–∞–±–µ–ª—è", min_value=1, step=1)
if st.button("–ù–∞–π—Ç–∏ —à—Ç–∞–±–µ–ª—å"):
    try:
        resp = requests.get(f"{API_URL}/{search_id}")
        if resp.status_code == 200 and resp.json():
            st.json(resp.json())
        else:
            st.warning("–®—Ç–∞–±–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

st.markdown("""
<div style="margin: 20px 0; padding: 15px; background-color: #f8f9fa; border-radius: 8px;">
    <h3>–£–¥–∞–ª–µ–Ω–∏–µ —à—Ç–∞–±–µ–ª—è</h3>
</div>
""", unsafe_allow_html=True)

for idx, row in filtered_df.iterrows():
    col1, col2 = st.columns([6, 1])
    with col1:
        st.write(f"ID: {row['id']} | –ù–∞–∑–≤–∞–Ω–∏–µ: {row['name']} | –°–∫–ª–∞–¥: {row.get('warehouse_name', row.get('warehouse_id', ''))}")
    with col2:
        if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"delete_{row['id']}"):
            try:
                resp = requests.delete(f"{API_URL}/{row['id']}")
                if resp.status_code == 200:
                    st.success(f"–®—Ç–∞–±–µ–ª—å {row['name']} —É–¥–∞–ª—ë–Ω!")
                    st.rerun()
                else:
                    st.error(f"–û—à–∏–±–∫–∞: {resp.text}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")


