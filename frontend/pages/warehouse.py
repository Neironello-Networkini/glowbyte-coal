import streamlit as st
import requests
import time
import pandas as pd
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞–º–∏", page_icon="üè¢", layout="wide")

# –®–∞–ø–∫–∞ —Å–∞–π—Ç–∞
def header():
    st.markdown(
        """
        <div class="site-header">
            <div class="logo">üî• FireWatch</div>
            <div class="nav">
                <a class="nav-item" href="/">–ì–ª–∞–≤–Ω–∞—è</a>
                <a class="nav-item" href="/stack">–®—Ç–∞–±–µ–ª–∏</a>
                <a class="nav-item" href="/warehouse">–°–∫–ª–∞–¥—ã</a>
                <a class="nav-item" href="/shipments">–í—ã–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–≥—Ä—É–∑–∫–∏</a>
                <a class="nav-item" href="/location">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</a>
                <a class="nav-item" href="/help">–°–ø—Ä–∞–≤–∫–∞</a>
            </div>
        </div>
        """,
        unsafe_allow_html=True,
    )

header()


# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª–∏
with open("styles.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_URL = "http://localhost:8000/warehouse"
MAX_RETRIES = 3
RETRY_DELAY = 1
LOCAL_DATA_FILE = "warehouses_data.json"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
def load_local_data():
    if os.path.exists(LOCAL_DATA_FILE):
        with open(LOCAL_DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return []

def save_local_data(data):
    with open(LOCAL_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def make_request(method, url, **kwargs):
    try:
        response = requests.request(method, url, **kwargs)
        response.raise_for_status()
        return response
    except requests.exceptions.RequestException as e:
        st.warning("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
        return None

st.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞–º–∏")

# --- READ ALL ---
st.header("–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
resp = make_request("GET", f"{API_URL}/")
warehouses = []

if resp:
    warehouses = resp.json()
else:
    warehouses = load_local_data()

if not warehouses:
    st.info("–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç")
else:
    # --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è ---
    page_size = 5
    total = len(warehouses)
    total_pages = (total + page_size - 1) // page_size

    page = st.number_input(
        "–°—Ç—Ä–∞–Ω–∏—Ü–∞",
        min_value=1,
        max_value=max(1, total_pages),
        value=1,
        step=1
    )

    start = (page - 1) * page_size
    end = start + page_size
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤
    st.table(pd.DataFrame(warehouses[start:end]))
    
    st.caption(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}")

# --- CREATE ---
st.header("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–∫–ª–∞–¥")
with st.form("create_warehouse"):
    new_warehouse_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞")
    submitted = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å")
    if submitted:
        if not new_warehouse_name.strip():
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞")
        else:
            resp = make_request("POST", f"{API_URL}/", json={"name": new_warehouse_name})
            if resp and resp.status_code == 201:
                st.success("–°–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                st.rerun()
            elif resp:
                st.error(f"–û—à–∏–±–∫–∞: {resp.text}")
            else:
                # –†–∞–±–æ—Ç–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                local_warehouses = load_local_data()
                new_id = max([w.get('id', 0) for w in local_warehouses], default=0) + 1
                local_warehouses.append({"id": new_id, "name": new_warehouse_name})
                save_local_data(local_warehouses)
                st.success("–°–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ!")
                st.rerun()

# --- UPDATE ---
st.header("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫–ª–∞–¥")
with st.form("update_warehouse"):
    update_id = st.number_input("ID —Å–∫–ª–∞–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", min_value=1, step=1, key="update_id")
    update_name = st.text_input("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞", key="update_name", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    update_submitted = st.form_submit_button("–û–±–Ω–æ–≤–∏—Ç—å")
    if update_submitted:
        if not update_name.strip():
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞")
        else:
            resp = make_request("PUT", f"{API_URL}/update/{update_id}", json={"name": update_name})
            if resp and resp.status_code == 200:
                st.success("–°–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                st.rerun()
            elif resp:
                st.error(f"–û—à–∏–±–∫–∞: {resp.text}")
            else:
                # –†–∞–±–æ—Ç–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                local_warehouses = load_local_data()
                warehouse_found = False
                for warehouse in local_warehouses:
                    if warehouse.get('id') == update_id:
                        warehouse['name'] = update_name
                        warehouse_found = True
                        break
                if warehouse_found:
                    save_local_data(local_warehouses)
                    st.success("–°–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ!")
                    st.rerun()
                else:
                    st.error("–°–∫–ª–∞–¥ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- DELETE ---
st.header("–£–¥–∞–ª–∏—Ç—å —Å–∫–ª–∞–¥")
with st.form("delete_warehouse"):
    delete_id = st.number_input("ID —Å–∫–ª–∞–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", min_value=1, step=1, key="delete_id")
    delete_submitted = st.form_submit_button("–£–¥–∞–ª–∏—Ç—å")
    if delete_submitted:
        if st.warning("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–∫–ª–∞–¥?"):
            resp = make_request("DELETE", f"{API_URL}/delete/{delete_id}")
            if resp and resp.status_code == 200:
                st.success("–°–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                st.rerun()
            elif resp:
                st.error(f"–û—à–∏–±–∫–∞: {resp.text}")
            else:
                # –†–∞–±–æ—Ç–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                local_warehouses = load_local_data()
                initial_length = len(local_warehouses)
                local_warehouses = [w for w in local_warehouses if w.get('id') != delete_id]
                if len(local_warehouses) < initial_length:
                    save_local_data(local_warehouses)
                    st.success("–°–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞!")
                    st.rerun()
                else:
                    st.error("–°–∫–ª–∞–¥ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω") 